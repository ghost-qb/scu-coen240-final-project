"""
Santa Clara University

COEN 240 - Machine Learning

Final Project

Quan Bach
Anh Truong



By running thi file: 
    - Kmeans cluster with doc2vec  will be performed and shown in output
    - true_k value can be modify for experimenting 
    - a txt file will be saved with the kmeans clustering info 
    - a plot will be saved to KMeans folder 
    - a grouping of clusters will be shown in output 
    
    
*** NOTICE ***: this script will dowload the 20 news group dataset from sklearn and perform processing directly here before the models. 
Therefore, it does not used the vocabularies generated by other files previously. However, the content should be the same. 


"""
import os
from sklearn.datasets import fetch_20newsgroups
from sklearn.cluster import KMeans
from sklearn.feature_extraction.text import TfidfVectorizer
import matplotlib.pyplot as plt
from gensim.models.doc2vec import Doc2Vec
from sklearn.decomposition import PCA
from sklearn.metrics.cluster import normalized_mutual_info_score as nmi




if __name__ == '__main__':
    
    if not os.path.exists('./KMeans/'):
           os.makedirs('./KMeans/')
           
     # load data 
    newsgroups_train = fetch_20newsgroups(subset='train', shuffle = True)    
    print('Dataset loaded...')
    print('...')
    
    vectorizer = TfidfVectorizer(max_df=0.5,min_df=0.05,stop_words='english')

    V = vectorizer.fit_transform(newsgroups_train.data)
    
    # load saved doc2vec model 
    d2v_model = Doc2Vec.load('./Doc2Vec/20newsgDoc2vec_DBOW_trained.model')
    
    # number of clusters 
    true_k = 20 
    
    kmeans_model = KMeans (n_clusters=true_k, init='k-means++', max_iter=100, n_init=1)
    
    X = kmeans_model.fit(d2v_model.docvecs.vectors_docs)
    labels=kmeans_model.labels_.tolist()
    
    print("Top terms per cluster:")

    order_centroids = kmeans_model.cluster_centers_.argsort()[:, ::-1]

    terms = vectorizer.get_feature_names() 
    
    out_file = open('./KMeans/kmean-doc2vec.txt','w')
    for i in range(true_k):
        print ("Cluster %d:" % i)
        out_file.write("Cluster %d:" % i)
        for ind in order_centroids[i, :10]:
            print (' %s' % terms[ind])
            out_file.write(' %s' % terms[ind])
        print ()
        out_file.write('\n')
    
    out_file.close()
    print('Saved kmean-doc2vec to KMean folder...')
    
    
    #PCA
    y_predict = kmeans_model.fit_predict(d2v_model.docvecs.vectors_docs)
    pca = PCA(n_components=2).fit(d2v_model.docvecs.vectors_docs)
    datapoint = pca.transform(d2v_model.docvecs.vectors_docs)
    
    color_list = ['#e6194b', '#3cb44b', '#ffe119', '#4363d8', '#f58231', '#911eb4', '#46f0f0', '#f032e6', '#bcf60c', '#fabebe', '#008080', '#e6beff', '#9a6324', '#fffac8', '#800000', '#aaffc3', '#808000', '#ffd8b1', '#000075', '#808080', '#ffffff', '#000000']
    
    colors = []
    for i in range(0,len(datapoint)):
        colors.append(color_list[newsgroups_train.target[i]])
        
    plt.figure
    plt.scatter(datapoint[:, 0], datapoint[:, 1],marker='o', s=20,c=colors)

    # plot the centroids
    plt.scatter(
        kmeans_model.cluster_centers_[:, 0], kmeans_model.cluster_centers_[:, 1],
        s=250, marker='*',
        c='red', edgecolor='black',
        label='centroids'
        )
    plt.legend(scatterpoints=1)
    plt.grid()
    plt.savefig('./KMeans/kmeans_doc2vec.png')
    
    # target 
    y_target = newsgroups_train.target
    
    # get the NMI Score
    print('NMI Score: ', nmi(y_target,y_predict))
    
